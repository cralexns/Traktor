@model List<MediaInfo>
@using Traktor.Core.Domain;
@using Traktor.Core.Extensions;
@using Traktor.Web.Controllers;

@{
    ViewData["Title"] = "Media";
}

<style type="text/css">
    .poster {
        height: 325px;
        overflow: hidden;
        position: relative;
    }

        .poster img {
            position: absolute;
            bottom: 0;
            left: 0;
            min-height: 100%;
            width: 100%;
        }

    .lib-items .card {
        max-width: 250px;
    }

    .lib-items .card-footer {
        z-index: 1;
    }

    .lib-items .card:hover .card-footer .priority {
        display: none;
    }

    .lib-items .card:hover .card-footer .actions {
        display: inline !important;
        position: absolute;
        right: 15px;
    }
</style>

<div class="text-center">

    <div class="accordion" id="library">
        @{

            foreach (var grouped in Model.OrderBy(x => x.Media.Release).ThenByDescending(x => x.Media.StateDate).GroupBy(x => x.Media.State).OrderBy(x => x.Key))
            {
                <div class="card group">
                    <div class="card-header">
                        <h2 class="mb-0">
                            <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#group_@(grouped.Key.ToString().ToLower())" aria-expanded="true">
                                @grouped.Key (@grouped.Count())
                            </button>
                        </h2>
                    </div>

                    <div id="group_@(grouped.Key.ToString().ToLower())" class="collapse @(grouped.Key == Media.MediaState.Available ? "show" : "")">
                        <div class="card-body card-deck justify-content-center lib-items">
                            @foreach (var indexedItem in (grouped.Key == Media.MediaState.Collected ? grouped.OrderByDescending(x => x.Media.CollectedAt ?? x.Media.StateDate).Take(20) : grouped.OrderByDescending(x => x.Download != null).ThenBy(x => x.Priority)).Select((e, i) => new { Info = e, Index = i }))
                            {
                                var item = indexedItem.Info.Media;
                                var download = indexedItem.Info.Download;
                            <div class="card text-left">
                                <div class="poster">
                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                    {
                                        <img src="@item.ImageUrl" />
                                    }
                                </div>
                                <div class="card-body">
                                    @*<a class="stretched-link" href="#@Url.Action("Get", "Home", new { dbId = item.DbId })"></a>*@
                                    @{
                                        switch (item)
                                        {
                                            case Episode episode:
                                                <h5 class="card-title">@episode.ShowTitle @($"{episode.Season:0}x{episode.Number:00}")</h5>
                                                @if (!string.IsNullOrEmpty(episode.Title))
                                                {
                                                    <h6 class="card-subtitle">@episode.Title</h6>
                                                }
                                                break;
                                            case Movie movie:
                                                <h5 class="card-title">@movie.Title (@movie.Year)</h5>
                                                break;
                                        }
                                    }
                                </div>
                                @if (item.State == Media.MediaState.Awaiting)
                                {
                                    <small class="card-footer text-muted d-flex align-items-center position-relative">
                                        <span class="flex-grow-1">
                                            <i class="far fa-clock"></i> Releases <span data-livestamp="@(item.Release.ToUnixTimeSeconds())" title="@item.Release"></span>
                                        </span>
                                        <span class="actions" style="display:none;">
                                            <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.Remove })" class="btn btn-danger btn-sm" title="Remove"><i class="fas fa-minus-circle"></i></a>
                                        </span>
                                    </small>
                                }
                                @if (item.State == Media.MediaState.Available)
                                {
                                    if (download != null)
                                    {
                                        var downloadClass = "";
                                        var width = Math.Round(download.Progress, 2);
                                        switch (download.State)
                                        {
                                            case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Downloading:
                                                downloadClass = "bg-success";
                                                break;
                                            case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Initializing:
                                                downloadClass = "bg-info";
                                                width = 100;
                                                break;
                                            case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Stalled:
                                                downloadClass = "bg-warning";
                                                break;
                                            case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Waiting:
                                                downloadClass = "bg-secondary";
                                                break;
                                            case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Failed:
                                                downloadClass = "bg-danger";
                                                width = 100;
                                                break;
                                        }
                                        <div class="progress rounded-0">
                                            <div class="progress-bar @downloadClass" role="progressbar" style="width: @FormattableString.Invariant($"{width}%")" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">

                                            </div>
                                        </div>
                                        <small class="card-footer text-muted d-flex align-items-center position-relative">
                                            <span class="flex-grow-1">
                                                @switch (download.State)
                                                {
                                                    case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Initializing:
                                                        <span><i class="fas fa-circle-notch"></i>&nbsp;Initializing..</span>
                                                        break;
                                                    case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Stalled:
                                                        <span class="text-warning"><i class="fas fa-exclamation-triangle"></i>&nbsp;Stalled!</span>
                                                        break;
                                                    case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Downloading:
                                                    case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Completed:
                                                        <span><i class="fas fa-arrow-alt-circle-down"></i>&nbsp;Downloading (@($"{Traktor.Core.Tools.Utility.SizeSuffix(download.DownloadSpeed)}/s"))</span>
                                                        break;
                                                    case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Waiting:
                                                        <span><i class="far fa-hourglass"></i>&nbsp;Waiting</span>
                                                        break;
                                                    case Traktor.Core.Services.Downloader.IDownloadInfo.DownloadState.Failed:
                                                        <span>Failed</span>
                                                        break;
                                                }
                                            </span>
                                            <span class="badge badge-secondary priority" title="Priority">@indexedItem.Info.Priority</span>
                                            <span class="actions" style="display:none;">
                                                <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.RestartDownload })" class="btn btn-info btn-sm" title="Restart download"><i class="fas fa-sync-alt"></i></a>
                                                <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.HashCheck })" class="btn btn-info btn-sm" title="HashCheck"><i class="fas fa-hashtag"></i></a>
                                                <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.CancelDownload })" class="btn btn-warning btn-sm" title="Cancel download"><i class="fas fa-ban"></i></a>
                                                <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.Remove })" class="btn btn-danger btn-sm" title="Remove"><i class="fas fa-minus-circle"></i></a>
                                                <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.TryAnotherMagnet })" class="btn btn-info btn-sm" title="Find another magnet"><i class="fas fa-question-circle"></i></a>
                                            </span>
                                        </small>
                                    }
                                    else if (item.Magnet != null)
                                    {
                                        <small class="card-footer text-muted d-flex align-items-center position-relative">
                                            <span class="flex-grow-1">
                                                <i class="fas fa-magnet"></i>&nbsp;<a href="@item.Magnet">Magnet found</a>
                                            </span>
                                            <span class="actions" style="display:none;">
                                                <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.Remove })" class="btn btn-danger btn-sm" title="Remove"><i class="fas fa-minus-circle"></i></a>
                                            </span>
                                        </small>
                                    }
                                    else
                                    {
                                        <small class="card-footer text-muted d-flex align-items-center position-relative">
                                            <span class="flex-grow-1"><i class="fas fa-search"></i>&nbsp;Last scouted <span data-livestamp="@(item.LastScoutedAt.ToUnixTimeSeconds())" title="@item.LastScoutedAt"></span></span>
                                            <span class="actions" style="display:none;">
                                                <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.Scout })" class="btn btn-info btn-sm" title="Scout now"><i class="fas fa-search-plus"></i></a>
                                                <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.Remove })" class="btn btn-danger btn-sm" title="Remove"><i class="fas fa-minus-circle"></i></a>
                                            </span>
                                        </small>
                                    }
                                }
                                @if (item.State == Media.MediaState.Collected)
                                {
                                    <small class="card-footer text-muted d-flex align-items-center position-relative">
                                        <span class="flex-grow-1"><i class="fas fa-box"></i>&nbsp;Collected <span data-livestamp="@((item.CollectedAt ?? item.StateDate).ToUnixTimeSeconds())" title="@(item.CollectedAt ?? item.StateDate)"></span></span>
                                        <span class="actions" style="display:none;">
                                            <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.Restart })" class="btn btn-info btn-sm" title="Restart"><i class="fas fa-redo"></i></a>
                                            <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.Remove })" class="btn btn-danger btn-sm" title="Remove"><i class="fas fa-minus-circle"></i></a>
                                        </span>
                                    </small>
                                }
                                @if (item.State == Media.MediaState.Abandoned)
                                {
                                    <small class="card-footer text-muted d-flex align-items-center position-relative">
                                        <span class="flex-grow-1"><i class="fas fa-exclamation-circle"></i>&nbsp;Abandoned <span data-livestamp="@(item.StateDate.ToUnixTimeSeconds())" title="@item.StateDate"></span></span>
                                        <span class="actions" style="display:none;">
                                            <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.Restart })" class="btn btn-info btn-sm" title="Restart"><i class="fas fa-redo"></i></a>
                                            <a href="@Url.Action("Action", "Home", new { dbId = item.DbId, actionType = HomeController.MediaAction.Remove })" class="btn btn-danger btn-sm" title="Remove"><i class="fas fa-minus-circle"></i></a>
                                        </span>
                                    </small>
                                }
                            </div>
                                @if ((indexedItem.Index + 1) % 7 == 0)
                                {
                                    <div class="w-100 mb-2"></div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>
@section Scripts
{
    <script type="text/javascript">

    </script>
}